# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_msg/DetectionList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ars548_msg.msg
import std_msgs.msg

class DetectionList(genpy.Message):
  _md5sum = "ceeb8d9c15bf5187a1286b3bf669567a"
  _type = "ars548_msg/DetectionList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 serviceID
uint16 MethodID
uint32 data_length
uint16 clientID
uint16 sessionID
uint8 protocol_version
uint8 interface_version
uint8 message_type
uint8 return_code
uint64 CRC
uint32 Length
uint32 SQC
uint32 DataID
uint32 Timestamp_Nanoseconds
uint32 Timestamp_Seconds
uint8 Timestamp_SyncStatus
uint32 EventDataQualifier
uint8 ExtendedQualifier
uint16 Origin_InvalidFlags
float32 Origin_Xpos
float32 Origin_Xstd
float32 Origin_Ypos
float32 Origin_Ystd
float32 Origin_Zpos
float32 Origin_Zstd
float32 Origin_Roll
float32 Origin_Rollstd
float32 Origin_Pitch
float32 Origin_Pitchstd
float32 Origin_Yaw
float32 Origin_Yawstd
uint8 List_InvalidFlags
detections[] detection_array
float32 List_RadVelDomain_Min
float32 List_RadVelDomain_Max
uint32 List_NumOfDetections
float32 Aln_AzimuthCorrection
float32 Aln_ElevationCorrection
uint8 Aln_Status
================================================================================
MSG: ars548_msg/detections
std_msgs/Header header
  
float32 f_x
float32 f_y
float32 f_z
uint8 u_InvalidFlags
float32 f_RangeRate
float32 f_RangeRateSTD
int8 s_RCS
uint16 u_MeasurementID
uint8 u_PositivePredictiveValue
uint8 u_Classification
uint8 u_MultiTargetProbability
uint16 u_ObjectID
uint8 u_AmbiguityFlag
uint16 u_SortIndex
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['serviceID','MethodID','data_length','clientID','sessionID','protocol_version','interface_version','message_type','return_code','CRC','Length','SQC','DataID','Timestamp_Nanoseconds','Timestamp_Seconds','Timestamp_SyncStatus','EventDataQualifier','ExtendedQualifier','Origin_InvalidFlags','Origin_Xpos','Origin_Xstd','Origin_Ypos','Origin_Ystd','Origin_Zpos','Origin_Zstd','Origin_Roll','Origin_Rollstd','Origin_Pitch','Origin_Pitchstd','Origin_Yaw','Origin_Yawstd','List_InvalidFlags','detection_array','List_RadVelDomain_Min','List_RadVelDomain_Max','List_NumOfDetections','Aln_AzimuthCorrection','Aln_ElevationCorrection','Aln_Status']
  _slot_types = ['uint16','uint16','uint32','uint16','uint16','uint8','uint8','uint8','uint8','uint64','uint32','uint32','uint32','uint32','uint32','uint8','uint32','uint8','uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','ars548_msg/detections[]','float32','float32','uint32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       serviceID,MethodID,data_length,clientID,sessionID,protocol_version,interface_version,message_type,return_code,CRC,Length,SQC,DataID,Timestamp_Nanoseconds,Timestamp_Seconds,Timestamp_SyncStatus,EventDataQualifier,ExtendedQualifier,Origin_InvalidFlags,Origin_Xpos,Origin_Xstd,Origin_Ypos,Origin_Ystd,Origin_Zpos,Origin_Zstd,Origin_Roll,Origin_Rollstd,Origin_Pitch,Origin_Pitchstd,Origin_Yaw,Origin_Yawstd,List_InvalidFlags,detection_array,List_RadVelDomain_Min,List_RadVelDomain_Max,List_NumOfDetections,Aln_AzimuthCorrection,Aln_ElevationCorrection,Aln_Status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectionList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.serviceID is None:
        self.serviceID = 0
      if self.MethodID is None:
        self.MethodID = 0
      if self.data_length is None:
        self.data_length = 0
      if self.clientID is None:
        self.clientID = 0
      if self.sessionID is None:
        self.sessionID = 0
      if self.protocol_version is None:
        self.protocol_version = 0
      if self.interface_version is None:
        self.interface_version = 0
      if self.message_type is None:
        self.message_type = 0
      if self.return_code is None:
        self.return_code = 0
      if self.CRC is None:
        self.CRC = 0
      if self.Length is None:
        self.Length = 0
      if self.SQC is None:
        self.SQC = 0
      if self.DataID is None:
        self.DataID = 0
      if self.Timestamp_Nanoseconds is None:
        self.Timestamp_Nanoseconds = 0
      if self.Timestamp_Seconds is None:
        self.Timestamp_Seconds = 0
      if self.Timestamp_SyncStatus is None:
        self.Timestamp_SyncStatus = 0
      if self.EventDataQualifier is None:
        self.EventDataQualifier = 0
      if self.ExtendedQualifier is None:
        self.ExtendedQualifier = 0
      if self.Origin_InvalidFlags is None:
        self.Origin_InvalidFlags = 0
      if self.Origin_Xpos is None:
        self.Origin_Xpos = 0.
      if self.Origin_Xstd is None:
        self.Origin_Xstd = 0.
      if self.Origin_Ypos is None:
        self.Origin_Ypos = 0.
      if self.Origin_Ystd is None:
        self.Origin_Ystd = 0.
      if self.Origin_Zpos is None:
        self.Origin_Zpos = 0.
      if self.Origin_Zstd is None:
        self.Origin_Zstd = 0.
      if self.Origin_Roll is None:
        self.Origin_Roll = 0.
      if self.Origin_Rollstd is None:
        self.Origin_Rollstd = 0.
      if self.Origin_Pitch is None:
        self.Origin_Pitch = 0.
      if self.Origin_Pitchstd is None:
        self.Origin_Pitchstd = 0.
      if self.Origin_Yaw is None:
        self.Origin_Yaw = 0.
      if self.Origin_Yawstd is None:
        self.Origin_Yawstd = 0.
      if self.List_InvalidFlags is None:
        self.List_InvalidFlags = 0
      if self.detection_array is None:
        self.detection_array = []
      if self.List_RadVelDomain_Min is None:
        self.List_RadVelDomain_Min = 0.
      if self.List_RadVelDomain_Max is None:
        self.List_RadVelDomain_Max = 0.
      if self.List_NumOfDetections is None:
        self.List_NumOfDetections = 0
      if self.Aln_AzimuthCorrection is None:
        self.Aln_AzimuthCorrection = 0.
      if self.Aln_ElevationCorrection is None:
        self.Aln_ElevationCorrection = 0.
      if self.Aln_Status is None:
        self.Aln_Status = 0
    else:
      self.serviceID = 0
      self.MethodID = 0
      self.data_length = 0
      self.clientID = 0
      self.sessionID = 0
      self.protocol_version = 0
      self.interface_version = 0
      self.message_type = 0
      self.return_code = 0
      self.CRC = 0
      self.Length = 0
      self.SQC = 0
      self.DataID = 0
      self.Timestamp_Nanoseconds = 0
      self.Timestamp_Seconds = 0
      self.Timestamp_SyncStatus = 0
      self.EventDataQualifier = 0
      self.ExtendedQualifier = 0
      self.Origin_InvalidFlags = 0
      self.Origin_Xpos = 0.
      self.Origin_Xstd = 0.
      self.Origin_Ypos = 0.
      self.Origin_Ystd = 0.
      self.Origin_Zpos = 0.
      self.Origin_Zstd = 0.
      self.Origin_Roll = 0.
      self.Origin_Rollstd = 0.
      self.Origin_Pitch = 0.
      self.Origin_Pitchstd = 0.
      self.Origin_Yaw = 0.
      self.Origin_Yawstd = 0.
      self.List_InvalidFlags = 0
      self.detection_array = []
      self.List_RadVelDomain_Min = 0.
      self.List_RadVelDomain_Max = 0.
      self.List_NumOfDetections = 0
      self.Aln_AzimuthCorrection = 0.
      self.Aln_ElevationCorrection = 0.
      self.Aln_Status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2HI2H4BQ5IBIBH12fB().pack(_x.serviceID, _x.MethodID, _x.data_length, _x.clientID, _x.sessionID, _x.protocol_version, _x.interface_version, _x.message_type, _x.return_code, _x.CRC, _x.Length, _x.SQC, _x.DataID, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.EventDataQualifier, _x.ExtendedQualifier, _x.Origin_InvalidFlags, _x.Origin_Xpos, _x.Origin_Xstd, _x.Origin_Ypos, _x.Origin_Ystd, _x.Origin_Zpos, _x.Origin_Zstd, _x.Origin_Roll, _x.Origin_Rollstd, _x.Origin_Pitch, _x.Origin_Pitchstd, _x.Origin_Yaw, _x.Origin_Yawstd, _x.List_InvalidFlags))
      length = len(self.detection_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.detection_array:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3fB2fbH3BHBH().pack(_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex))
      _x = self
      buff.write(_get_struct_2fI2fB().pack(_x.List_RadVelDomain_Min, _x.List_RadVelDomain_Max, _x.List_NumOfDetections, _x.Aln_AzimuthCorrection, _x.Aln_ElevationCorrection, _x.Aln_Status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.detection_array is None:
        self.detection_array = None
      end = 0
      _x = self
      start = end
      end += 101
      (_x.serviceID, _x.MethodID, _x.data_length, _x.clientID, _x.sessionID, _x.protocol_version, _x.interface_version, _x.message_type, _x.return_code, _x.CRC, _x.Length, _x.SQC, _x.DataID, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.EventDataQualifier, _x.ExtendedQualifier, _x.Origin_InvalidFlags, _x.Origin_Xpos, _x.Origin_Xstd, _x.Origin_Ypos, _x.Origin_Ystd, _x.Origin_Zpos, _x.Origin_Zstd, _x.Origin_Roll, _x.Origin_Rollstd, _x.Origin_Pitch, _x.Origin_Pitchstd, _x.Origin_Yaw, _x.Origin_Yawstd, _x.List_InvalidFlags,) = _get_struct_2HI2H4BQ5IBIBH12fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detection_array = []
      for i in range(0, length):
        val1 = ars548_msg.msg.detections()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _get_struct_I().unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.frame_id = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex,) = _get_struct_3fB2fbH3BHBH().unpack(str[start:end])
        self.detection_array.append(val1)
      _x = self
      start = end
      end += 21
      (_x.List_RadVelDomain_Min, _x.List_RadVelDomain_Max, _x.List_NumOfDetections, _x.Aln_AzimuthCorrection, _x.Aln_ElevationCorrection, _x.Aln_Status,) = _get_struct_2fI2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2HI2H4BQ5IBIBH12fB().pack(_x.serviceID, _x.MethodID, _x.data_length, _x.clientID, _x.sessionID, _x.protocol_version, _x.interface_version, _x.message_type, _x.return_code, _x.CRC, _x.Length, _x.SQC, _x.DataID, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.EventDataQualifier, _x.ExtendedQualifier, _x.Origin_InvalidFlags, _x.Origin_Xpos, _x.Origin_Xstd, _x.Origin_Ypos, _x.Origin_Ystd, _x.Origin_Zpos, _x.Origin_Zstd, _x.Origin_Roll, _x.Origin_Rollstd, _x.Origin_Pitch, _x.Origin_Pitchstd, _x.Origin_Yaw, _x.Origin_Yawstd, _x.List_InvalidFlags))
      length = len(self.detection_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.detection_array:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3fB2fbH3BHBH().pack(_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex))
      _x = self
      buff.write(_get_struct_2fI2fB().pack(_x.List_RadVelDomain_Min, _x.List_RadVelDomain_Max, _x.List_NumOfDetections, _x.Aln_AzimuthCorrection, _x.Aln_ElevationCorrection, _x.Aln_Status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.detection_array is None:
        self.detection_array = None
      end = 0
      _x = self
      start = end
      end += 101
      (_x.serviceID, _x.MethodID, _x.data_length, _x.clientID, _x.sessionID, _x.protocol_version, _x.interface_version, _x.message_type, _x.return_code, _x.CRC, _x.Length, _x.SQC, _x.DataID, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.EventDataQualifier, _x.ExtendedQualifier, _x.Origin_InvalidFlags, _x.Origin_Xpos, _x.Origin_Xstd, _x.Origin_Ypos, _x.Origin_Ystd, _x.Origin_Zpos, _x.Origin_Zstd, _x.Origin_Roll, _x.Origin_Rollstd, _x.Origin_Pitch, _x.Origin_Pitchstd, _x.Origin_Yaw, _x.Origin_Yawstd, _x.List_InvalidFlags,) = _get_struct_2HI2H4BQ5IBIBH12fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detection_array = []
      for i in range(0, length):
        val1 = ars548_msg.msg.detections()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex,) = _get_struct_3fB2fbH3BHBH().unpack(str[start:end])
        self.detection_array.append(val1)
      _x = self
      start = end
      end += 21
      (_x.List_RadVelDomain_Min, _x.List_RadVelDomain_Max, _x.List_NumOfDetections, _x.Aln_AzimuthCorrection, _x.Aln_ElevationCorrection, _x.Aln_Status,) = _get_struct_2fI2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2HI2H4BQ5IBIBH12fB = None
def _get_struct_2HI2H4BQ5IBIBH12fB():
    global _struct_2HI2H4BQ5IBIBH12fB
    if _struct_2HI2H4BQ5IBIBH12fB is None:
        _struct_2HI2H4BQ5IBIBH12fB = struct.Struct("<2HI2H4BQ5IBIBH12fB")
    return _struct_2HI2H4BQ5IBIBH12fB
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2fI2fB = None
def _get_struct_2fI2fB():
    global _struct_2fI2fB
    if _struct_2fI2fB is None:
        _struct_2fI2fB = struct.Struct("<2fI2fB")
    return _struct_2fI2fB
_struct_3fB2fbH3BHBH = None
def _get_struct_3fB2fbH3BHBH():
    global _struct_3fB2fbH3BHBH
    if _struct_3fB2fbH3BHBH is None:
        _struct_3fB2fbH3BHBH = struct.Struct("<3fB2fbH3BHBH")
    return _struct_3fB2fbH3BHBH
