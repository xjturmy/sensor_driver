# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_msg/detections.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class detections(genpy.Message):
  _md5sum = "4f5e661caf3e71fdf26903f146bda01f"
  _type = "ars548_msg/detections"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
  
float32 f_x
float32 f_y
float32 f_z
uint8 u_InvalidFlags
float32 f_RangeRate
float32 f_RangeRateSTD
int8 s_RCS
uint16 u_MeasurementID
uint8 u_PositivePredictiveValue
uint8 u_Classification
uint8 u_MultiTargetProbability
uint16 u_ObjectID
uint8 u_AmbiguityFlag
uint16 u_SortIndex
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','f_x','f_y','f_z','u_InvalidFlags','f_RangeRate','f_RangeRateSTD','s_RCS','u_MeasurementID','u_PositivePredictiveValue','u_Classification','u_MultiTargetProbability','u_ObjectID','u_AmbiguityFlag','u_SortIndex']
  _slot_types = ['std_msgs/Header','float32','float32','float32','uint8','float32','float32','int8','uint16','uint8','uint8','uint8','uint16','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,f_x,f_y,f_z,u_InvalidFlags,f_RangeRate,f_RangeRateSTD,s_RCS,u_MeasurementID,u_PositivePredictiveValue,u_Classification,u_MultiTargetProbability,u_ObjectID,u_AmbiguityFlag,u_SortIndex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(detections, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.f_x is None:
        self.f_x = 0.
      if self.f_y is None:
        self.f_y = 0.
      if self.f_z is None:
        self.f_z = 0.
      if self.u_InvalidFlags is None:
        self.u_InvalidFlags = 0
      if self.f_RangeRate is None:
        self.f_RangeRate = 0.
      if self.f_RangeRateSTD is None:
        self.f_RangeRateSTD = 0.
      if self.s_RCS is None:
        self.s_RCS = 0
      if self.u_MeasurementID is None:
        self.u_MeasurementID = 0
      if self.u_PositivePredictiveValue is None:
        self.u_PositivePredictiveValue = 0
      if self.u_Classification is None:
        self.u_Classification = 0
      if self.u_MultiTargetProbability is None:
        self.u_MultiTargetProbability = 0
      if self.u_ObjectID is None:
        self.u_ObjectID = 0
      if self.u_AmbiguityFlag is None:
        self.u_AmbiguityFlag = 0
      if self.u_SortIndex is None:
        self.u_SortIndex = 0
    else:
      self.header = std_msgs.msg.Header()
      self.f_x = 0.
      self.f_y = 0.
      self.f_z = 0.
      self.u_InvalidFlags = 0
      self.f_RangeRate = 0.
      self.f_RangeRateSTD = 0.
      self.s_RCS = 0
      self.u_MeasurementID = 0
      self.u_PositivePredictiveValue = 0
      self.u_Classification = 0
      self.u_MultiTargetProbability = 0
      self.u_ObjectID = 0
      self.u_AmbiguityFlag = 0
      self.u_SortIndex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3fB2fbH3BHBH().pack(_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex,) = _get_struct_3fB2fbH3BHBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3fB2fbH3BHBH().pack(_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.f_x, _x.f_y, _x.f_z, _x.u_InvalidFlags, _x.f_RangeRate, _x.f_RangeRateSTD, _x.s_RCS, _x.u_MeasurementID, _x.u_PositivePredictiveValue, _x.u_Classification, _x.u_MultiTargetProbability, _x.u_ObjectID, _x.u_AmbiguityFlag, _x.u_SortIndex,) = _get_struct_3fB2fbH3BHBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3fB2fbH3BHBH = None
def _get_struct_3fB2fbH3BHBH():
    global _struct_3fB2fbH3BHBH
    if _struct_3fB2fbH3BHBH is None:
        _struct_3fB2fbH3BHBH = struct.Struct("<3fB2fbH3BHBH")
    return _struct_3fB2fbH3BHBH
