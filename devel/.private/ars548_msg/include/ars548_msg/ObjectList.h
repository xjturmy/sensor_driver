// Generated by gencpp from file ars548_msg/ObjectList.msg
// DO NOT EDIT!


#ifndef ARS548_MSG_MESSAGE_OBJECTLIST_H
#define ARS548_MSG_MESSAGE_OBJECTLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ars548_msg/objects.h>

namespace ars548_msg
{
template <class ContainerAllocator>
struct ObjectList_
{
  typedef ObjectList_<ContainerAllocator> Type;

  ObjectList_()
    : serviceID(0)
    , MethodID(0)
    , data_length(0)
    , clientID(0)
    , sessionID(0)
    , protocol_version(0)
    , interface_version(0)
    , message_type(0)
    , return_code(0)
    , CRC(0)
    , Length(0)
    , SQC(0)
    , DataID(0)
    , Timestamp_Nanoseconds(0)
    , Timestamp_Seconds(0)
    , Timestamp_SyncStatus(0)
    , EventDataQualifier(0)
    , ExtendedQualifier(0)
    , ObjectList_NumOfObjects(0)
    , object_array()  {
    }
  ObjectList_(const ContainerAllocator& _alloc)
    : serviceID(0)
    , MethodID(0)
    , data_length(0)
    , clientID(0)
    , sessionID(0)
    , protocol_version(0)
    , interface_version(0)
    , message_type(0)
    , return_code(0)
    , CRC(0)
    , Length(0)
    , SQC(0)
    , DataID(0)
    , Timestamp_Nanoseconds(0)
    , Timestamp_Seconds(0)
    , Timestamp_SyncStatus(0)
    , EventDataQualifier(0)
    , ExtendedQualifier(0)
    , ObjectList_NumOfObjects(0)
    , object_array(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _serviceID_type;
  _serviceID_type serviceID;

   typedef uint16_t _MethodID_type;
  _MethodID_type MethodID;

   typedef uint32_t _data_length_type;
  _data_length_type data_length;

   typedef uint16_t _clientID_type;
  _clientID_type clientID;

   typedef uint16_t _sessionID_type;
  _sessionID_type sessionID;

   typedef uint8_t _protocol_version_type;
  _protocol_version_type protocol_version;

   typedef uint8_t _interface_version_type;
  _interface_version_type interface_version;

   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef uint8_t _return_code_type;
  _return_code_type return_code;

   typedef uint64_t _CRC_type;
  _CRC_type CRC;

   typedef uint32_t _Length_type;
  _Length_type Length;

   typedef uint32_t _SQC_type;
  _SQC_type SQC;

   typedef uint32_t _DataID_type;
  _DataID_type DataID;

   typedef uint32_t _Timestamp_Nanoseconds_type;
  _Timestamp_Nanoseconds_type Timestamp_Nanoseconds;

   typedef uint32_t _Timestamp_Seconds_type;
  _Timestamp_Seconds_type Timestamp_Seconds;

   typedef uint8_t _Timestamp_SyncStatus_type;
  _Timestamp_SyncStatus_type Timestamp_SyncStatus;

   typedef uint32_t _EventDataQualifier_type;
  _EventDataQualifier_type EventDataQualifier;

   typedef uint8_t _ExtendedQualifier_type;
  _ExtendedQualifier_type ExtendedQualifier;

   typedef uint8_t _ObjectList_NumOfObjects_type;
  _ObjectList_NumOfObjects_type ObjectList_NumOfObjects;

   typedef std::vector< ::ars548_msg::objects_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ars548_msg::objects_<ContainerAllocator> >> _object_array_type;
  _object_array_type object_array;





  typedef boost::shared_ptr< ::ars548_msg::ObjectList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_msg::ObjectList_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectList_

typedef ::ars548_msg::ObjectList_<std::allocator<void> > ObjectList;

typedef boost::shared_ptr< ::ars548_msg::ObjectList > ObjectListPtr;
typedef boost::shared_ptr< ::ars548_msg::ObjectList const> ObjectListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_msg::ObjectList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_msg::ObjectList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_msg::ObjectList_<ContainerAllocator1> & lhs, const ::ars548_msg::ObjectList_<ContainerAllocator2> & rhs)
{
  return lhs.serviceID == rhs.serviceID &&
    lhs.MethodID == rhs.MethodID &&
    lhs.data_length == rhs.data_length &&
    lhs.clientID == rhs.clientID &&
    lhs.sessionID == rhs.sessionID &&
    lhs.protocol_version == rhs.protocol_version &&
    lhs.interface_version == rhs.interface_version &&
    lhs.message_type == rhs.message_type &&
    lhs.return_code == rhs.return_code &&
    lhs.CRC == rhs.CRC &&
    lhs.Length == rhs.Length &&
    lhs.SQC == rhs.SQC &&
    lhs.DataID == rhs.DataID &&
    lhs.Timestamp_Nanoseconds == rhs.Timestamp_Nanoseconds &&
    lhs.Timestamp_Seconds == rhs.Timestamp_Seconds &&
    lhs.Timestamp_SyncStatus == rhs.Timestamp_SyncStatus &&
    lhs.EventDataQualifier == rhs.EventDataQualifier &&
    lhs.ExtendedQualifier == rhs.ExtendedQualifier &&
    lhs.ObjectList_NumOfObjects == rhs.ObjectList_NumOfObjects &&
    lhs.object_array == rhs.object_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_msg::ObjectList_<ContainerAllocator1> & lhs, const ::ars548_msg::ObjectList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::ObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::ObjectList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::ObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::ObjectList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::ObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::ObjectList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_msg::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8d11fc281e93cc59f0b25b1aef1ab45";
  }

  static const char* value(const ::ars548_msg::ObjectList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8d11fc281e93cc5ULL;
  static const uint64_t static_value2 = 0x9f0b25b1aef1ab45ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_msg::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_msg/ObjectList";
  }

  static const char* value(const ::ars548_msg::ObjectList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_msg::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 serviceID\n"
"uint16 MethodID\n"
"uint32 data_length\n"
"uint16 clientID\n"
"uint16 sessionID\n"
"uint8 protocol_version\n"
"uint8 interface_version\n"
"uint8 message_type\n"
"uint8 return_code\n"
"uint64 CRC\n"
"uint32 Length\n"
"uint32 SQC\n"
"uint32 DataID\n"
"uint32 Timestamp_Nanoseconds\n"
"uint32 Timestamp_Seconds\n"
"uint8 Timestamp_SyncStatus\n"
"uint32 EventDataQualifier\n"
"uint8 ExtendedQualifier\n"
"uint8 ObjectList_NumOfObjects\n"
"objects[] object_array\n"
"================================================================================\n"
"MSG: ars548_msg/objects\n"
"std_msgs/Header header\n"
"    \n"
"uint16 u_StatusSensor\n"
"uint32 u_ID\n"
"uint16 u_Age\n"
"uint8 u_StatusMeasurement\n"
"uint8 u_StatusMovement\n"
"uint16 u_Position_InvalidFlags\n"
"uint8 u_Position_Reference\n"
"float32 u_Position_X\n"
"float32 u_Position_X_STD\n"
"float32 u_Position_Y\n"
"float32 u_Position_Y_STD\n"
"float32 u_Position_Z\n"
"float32 u_Position_Z_STD\n"
"float32 u_Position_CovarianceXY\n"
"float32 u_Position_Orientation\n"
"float32 u_Position_Orientation_STD\n"
"uint8 u_Existence_InvalidFlags\n"
"float32 u_Existence_Probability\n"
"float32 u_Existence_PPV\n"
"uint8 u_Classification_Car\n"
"uint8 u_Classification_Truck\n"
"uint8 u_Classification_Motorcycle\n"
"uint8 u_Classification_Bicycle\n"
"uint8 u_Classification_Pedestrian\n"
"uint8 u_Classification_Animal\n"
"uint8 u_Classification_Hazard\n"
"uint8 u_Classification_Unknown\n"
"uint8 u_Classification_Overdrivable\n"
"uint8 u_Classification_Underdrivable\n"
"uint8 u_Dynamics_AbsVel_InvalidFlags\n"
"float32 f_Dynamics_AbsVel_X\n"
"float32 f_Dynamics_AbsVel_X_STD\n"
"float32 f_Dynamics_AbsVel_Y\n"
"float32 f_Dynamics_AbsVel_Y_STD\n"
"float32 f_Dynamics_AbsVel_CovarianceXY\n"
"uint8 u_Dynamics_RelVel_InvalidFlags\n"
"float32 f_Dynamics_RelVel_X\n"
"float32 f_Dynamics_RelVel_X_STD\n"
"float32 f_Dynamics_RelVel_Y\n"
"float32 f_Dynamics_RelVel_Y_STD\n"
"float32 f_Dynamics_RelVel_CovarianceXY\n"
"uint8 u_Dynamics_AbsAccel_InvalidFlags\n"
"float32 f_Dynamics_AbsAccel_X\n"
"float32 f_Dynamics_AbsAccel_X_STD\n"
"float32 f_Dynamics_AbsAccel_Y\n"
"float32 f_Dynamics_AbsAccel_Y_STD\n"
"float32 f_Dynamics_AbsAccel_CovarianceXY\n"
"uint8 u_Dynamics_RelAccel_InvalidFlags\n"
"float32 f_Dynamics_RelAccel_X\n"
"float32 f_Dynamics_RelAccel_X_STD\n"
"float32 f_Dynamics_RelAccel_Y\n"
"float32 f_Dynamics_RelAccel_Y_STD\n"
"float32 f_Dynamics_RelAccel_CovarianceXY\n"
"uint8 u_Dynamics_Orientation_InvalidFlags\n"
"float32 u_Dynamics_Orientation_Rate_Mean\n"
"float32 u_Dynamics_Orientation_Rate_STD\n"
"uint32 u_Shape_Length_Status\n"
"uint8 u_Shape_Length_Edge_InvalidFlags\n"
"float32 u_Shape_Length_Edge_Mean\n"
"float32 u_Shape_Length_Edge_STD\n"
"uint32 u_Shape_Width_Status\n"
"uint8 u_Shape_Width_Edge_InvalidFlags\n"
"float32 u_Shape_Width_Edge_Mean\n"
"float32 u_Shape_Width_Edge_STD\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ars548_msg::ObjectList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_msg::ObjectList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.serviceID);
      stream.next(m.MethodID);
      stream.next(m.data_length);
      stream.next(m.clientID);
      stream.next(m.sessionID);
      stream.next(m.protocol_version);
      stream.next(m.interface_version);
      stream.next(m.message_type);
      stream.next(m.return_code);
      stream.next(m.CRC);
      stream.next(m.Length);
      stream.next(m.SQC);
      stream.next(m.DataID);
      stream.next(m.Timestamp_Nanoseconds);
      stream.next(m.Timestamp_Seconds);
      stream.next(m.Timestamp_SyncStatus);
      stream.next(m.EventDataQualifier);
      stream.next(m.ExtendedQualifier);
      stream.next(m.ObjectList_NumOfObjects);
      stream.next(m.object_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_msg::ObjectList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_msg::ObjectList_<ContainerAllocator>& v)
  {
    s << indent << "serviceID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.serviceID);
    s << indent << "MethodID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.MethodID);
    s << indent << "data_length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data_length);
    s << indent << "clientID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.clientID);
    s << indent << "sessionID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sessionID);
    s << indent << "protocol_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.protocol_version);
    s << indent << "interface_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interface_version);
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "return_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_code);
    s << indent << "CRC: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.CRC);
    s << indent << "Length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Length);
    s << indent << "SQC: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.SQC);
    s << indent << "DataID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.DataID);
    s << indent << "Timestamp_Nanoseconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Timestamp_Nanoseconds);
    s << indent << "Timestamp_Seconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Timestamp_Seconds);
    s << indent << "Timestamp_SyncStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Timestamp_SyncStatus);
    s << indent << "EventDataQualifier: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.EventDataQualifier);
    s << indent << "ExtendedQualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ExtendedQualifier);
    s << indent << "ObjectList_NumOfObjects: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ObjectList_NumOfObjects);
    s << indent << "object_array[]" << std::endl;
    for (size_t i = 0; i < v.object_array.size(); ++i)
    {
      s << indent << "  object_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ars548_msg::objects_<ContainerAllocator> >::stream(s, indent + "    ", v.object_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MSG_MESSAGE_OBJECTLIST_H
