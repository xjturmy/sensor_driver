// Generated by gencpp from file ars548_msg/DetectionList.msg
// DO NOT EDIT!


#ifndef ARS548_MSG_MESSAGE_DETECTIONLIST_H
#define ARS548_MSG_MESSAGE_DETECTIONLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ars548_msg/detections.h>

namespace ars548_msg
{
template <class ContainerAllocator>
struct DetectionList_
{
  typedef DetectionList_<ContainerAllocator> Type;

  DetectionList_()
    : serviceID(0)
    , MethodID(0)
    , data_length(0)
    , clientID(0)
    , sessionID(0)
    , protocol_version(0)
    , interface_version(0)
    , message_type(0)
    , return_code(0)
    , CRC(0)
    , Length(0)
    , SQC(0)
    , DataID(0)
    , Timestamp_Nanoseconds(0)
    , Timestamp_Seconds(0)
    , Timestamp_SyncStatus(0)
    , EventDataQualifier(0)
    , ExtendedQualifier(0)
    , Origin_InvalidFlags(0)
    , Origin_Xpos(0.0)
    , Origin_Xstd(0.0)
    , Origin_Ypos(0.0)
    , Origin_Ystd(0.0)
    , Origin_Zpos(0.0)
    , Origin_Zstd(0.0)
    , Origin_Roll(0.0)
    , Origin_Rollstd(0.0)
    , Origin_Pitch(0.0)
    , Origin_Pitchstd(0.0)
    , Origin_Yaw(0.0)
    , Origin_Yawstd(0.0)
    , List_InvalidFlags(0)
    , detection_array()
    , List_RadVelDomain_Min(0.0)
    , List_RadVelDomain_Max(0.0)
    , List_NumOfDetections(0)
    , Aln_AzimuthCorrection(0.0)
    , Aln_ElevationCorrection(0.0)
    , Aln_Status(0)  {
    }
  DetectionList_(const ContainerAllocator& _alloc)
    : serviceID(0)
    , MethodID(0)
    , data_length(0)
    , clientID(0)
    , sessionID(0)
    , protocol_version(0)
    , interface_version(0)
    , message_type(0)
    , return_code(0)
    , CRC(0)
    , Length(0)
    , SQC(0)
    , DataID(0)
    , Timestamp_Nanoseconds(0)
    , Timestamp_Seconds(0)
    , Timestamp_SyncStatus(0)
    , EventDataQualifier(0)
    , ExtendedQualifier(0)
    , Origin_InvalidFlags(0)
    , Origin_Xpos(0.0)
    , Origin_Xstd(0.0)
    , Origin_Ypos(0.0)
    , Origin_Ystd(0.0)
    , Origin_Zpos(0.0)
    , Origin_Zstd(0.0)
    , Origin_Roll(0.0)
    , Origin_Rollstd(0.0)
    , Origin_Pitch(0.0)
    , Origin_Pitchstd(0.0)
    , Origin_Yaw(0.0)
    , Origin_Yawstd(0.0)
    , List_InvalidFlags(0)
    , detection_array(_alloc)
    , List_RadVelDomain_Min(0.0)
    , List_RadVelDomain_Max(0.0)
    , List_NumOfDetections(0)
    , Aln_AzimuthCorrection(0.0)
    , Aln_ElevationCorrection(0.0)
    , Aln_Status(0)  {
  (void)_alloc;
    }



   typedef uint16_t _serviceID_type;
  _serviceID_type serviceID;

   typedef uint16_t _MethodID_type;
  _MethodID_type MethodID;

   typedef uint32_t _data_length_type;
  _data_length_type data_length;

   typedef uint16_t _clientID_type;
  _clientID_type clientID;

   typedef uint16_t _sessionID_type;
  _sessionID_type sessionID;

   typedef uint8_t _protocol_version_type;
  _protocol_version_type protocol_version;

   typedef uint8_t _interface_version_type;
  _interface_version_type interface_version;

   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef uint8_t _return_code_type;
  _return_code_type return_code;

   typedef uint64_t _CRC_type;
  _CRC_type CRC;

   typedef uint32_t _Length_type;
  _Length_type Length;

   typedef uint32_t _SQC_type;
  _SQC_type SQC;

   typedef uint32_t _DataID_type;
  _DataID_type DataID;

   typedef uint32_t _Timestamp_Nanoseconds_type;
  _Timestamp_Nanoseconds_type Timestamp_Nanoseconds;

   typedef uint32_t _Timestamp_Seconds_type;
  _Timestamp_Seconds_type Timestamp_Seconds;

   typedef uint8_t _Timestamp_SyncStatus_type;
  _Timestamp_SyncStatus_type Timestamp_SyncStatus;

   typedef uint32_t _EventDataQualifier_type;
  _EventDataQualifier_type EventDataQualifier;

   typedef uint8_t _ExtendedQualifier_type;
  _ExtendedQualifier_type ExtendedQualifier;

   typedef uint16_t _Origin_InvalidFlags_type;
  _Origin_InvalidFlags_type Origin_InvalidFlags;

   typedef float _Origin_Xpos_type;
  _Origin_Xpos_type Origin_Xpos;

   typedef float _Origin_Xstd_type;
  _Origin_Xstd_type Origin_Xstd;

   typedef float _Origin_Ypos_type;
  _Origin_Ypos_type Origin_Ypos;

   typedef float _Origin_Ystd_type;
  _Origin_Ystd_type Origin_Ystd;

   typedef float _Origin_Zpos_type;
  _Origin_Zpos_type Origin_Zpos;

   typedef float _Origin_Zstd_type;
  _Origin_Zstd_type Origin_Zstd;

   typedef float _Origin_Roll_type;
  _Origin_Roll_type Origin_Roll;

   typedef float _Origin_Rollstd_type;
  _Origin_Rollstd_type Origin_Rollstd;

   typedef float _Origin_Pitch_type;
  _Origin_Pitch_type Origin_Pitch;

   typedef float _Origin_Pitchstd_type;
  _Origin_Pitchstd_type Origin_Pitchstd;

   typedef float _Origin_Yaw_type;
  _Origin_Yaw_type Origin_Yaw;

   typedef float _Origin_Yawstd_type;
  _Origin_Yawstd_type Origin_Yawstd;

   typedef uint8_t _List_InvalidFlags_type;
  _List_InvalidFlags_type List_InvalidFlags;

   typedef std::vector< ::ars548_msg::detections_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ars548_msg::detections_<ContainerAllocator> >> _detection_array_type;
  _detection_array_type detection_array;

   typedef float _List_RadVelDomain_Min_type;
  _List_RadVelDomain_Min_type List_RadVelDomain_Min;

   typedef float _List_RadVelDomain_Max_type;
  _List_RadVelDomain_Max_type List_RadVelDomain_Max;

   typedef uint32_t _List_NumOfDetections_type;
  _List_NumOfDetections_type List_NumOfDetections;

   typedef float _Aln_AzimuthCorrection_type;
  _Aln_AzimuthCorrection_type Aln_AzimuthCorrection;

   typedef float _Aln_ElevationCorrection_type;
  _Aln_ElevationCorrection_type Aln_ElevationCorrection;

   typedef uint8_t _Aln_Status_type;
  _Aln_Status_type Aln_Status;





  typedef boost::shared_ptr< ::ars548_msg::DetectionList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_msg::DetectionList_<ContainerAllocator> const> ConstPtr;

}; // struct DetectionList_

typedef ::ars548_msg::DetectionList_<std::allocator<void> > DetectionList;

typedef boost::shared_ptr< ::ars548_msg::DetectionList > DetectionListPtr;
typedef boost::shared_ptr< ::ars548_msg::DetectionList const> DetectionListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_msg::DetectionList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_msg::DetectionList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_msg::DetectionList_<ContainerAllocator1> & lhs, const ::ars548_msg::DetectionList_<ContainerAllocator2> & rhs)
{
  return lhs.serviceID == rhs.serviceID &&
    lhs.MethodID == rhs.MethodID &&
    lhs.data_length == rhs.data_length &&
    lhs.clientID == rhs.clientID &&
    lhs.sessionID == rhs.sessionID &&
    lhs.protocol_version == rhs.protocol_version &&
    lhs.interface_version == rhs.interface_version &&
    lhs.message_type == rhs.message_type &&
    lhs.return_code == rhs.return_code &&
    lhs.CRC == rhs.CRC &&
    lhs.Length == rhs.Length &&
    lhs.SQC == rhs.SQC &&
    lhs.DataID == rhs.DataID &&
    lhs.Timestamp_Nanoseconds == rhs.Timestamp_Nanoseconds &&
    lhs.Timestamp_Seconds == rhs.Timestamp_Seconds &&
    lhs.Timestamp_SyncStatus == rhs.Timestamp_SyncStatus &&
    lhs.EventDataQualifier == rhs.EventDataQualifier &&
    lhs.ExtendedQualifier == rhs.ExtendedQualifier &&
    lhs.Origin_InvalidFlags == rhs.Origin_InvalidFlags &&
    lhs.Origin_Xpos == rhs.Origin_Xpos &&
    lhs.Origin_Xstd == rhs.Origin_Xstd &&
    lhs.Origin_Ypos == rhs.Origin_Ypos &&
    lhs.Origin_Ystd == rhs.Origin_Ystd &&
    lhs.Origin_Zpos == rhs.Origin_Zpos &&
    lhs.Origin_Zstd == rhs.Origin_Zstd &&
    lhs.Origin_Roll == rhs.Origin_Roll &&
    lhs.Origin_Rollstd == rhs.Origin_Rollstd &&
    lhs.Origin_Pitch == rhs.Origin_Pitch &&
    lhs.Origin_Pitchstd == rhs.Origin_Pitchstd &&
    lhs.Origin_Yaw == rhs.Origin_Yaw &&
    lhs.Origin_Yawstd == rhs.Origin_Yawstd &&
    lhs.List_InvalidFlags == rhs.List_InvalidFlags &&
    lhs.detection_array == rhs.detection_array &&
    lhs.List_RadVelDomain_Min == rhs.List_RadVelDomain_Min &&
    lhs.List_RadVelDomain_Max == rhs.List_RadVelDomain_Max &&
    lhs.List_NumOfDetections == rhs.List_NumOfDetections &&
    lhs.Aln_AzimuthCorrection == rhs.Aln_AzimuthCorrection &&
    lhs.Aln_ElevationCorrection == rhs.Aln_ElevationCorrection &&
    lhs.Aln_Status == rhs.Aln_Status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_msg::DetectionList_<ContainerAllocator1> & lhs, const ::ars548_msg::DetectionList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::DetectionList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::DetectionList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::DetectionList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::DetectionList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::DetectionList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::DetectionList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_msg::DetectionList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ceeb8d9c15bf5187a1286b3bf669567a";
  }

  static const char* value(const ::ars548_msg::DetectionList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xceeb8d9c15bf5187ULL;
  static const uint64_t static_value2 = 0xa1286b3bf669567aULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_msg::DetectionList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_msg/DetectionList";
  }

  static const char* value(const ::ars548_msg::DetectionList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_msg::DetectionList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 serviceID\n"
"uint16 MethodID\n"
"uint32 data_length\n"
"uint16 clientID\n"
"uint16 sessionID\n"
"uint8 protocol_version\n"
"uint8 interface_version\n"
"uint8 message_type\n"
"uint8 return_code\n"
"uint64 CRC\n"
"uint32 Length\n"
"uint32 SQC\n"
"uint32 DataID\n"
"uint32 Timestamp_Nanoseconds\n"
"uint32 Timestamp_Seconds\n"
"uint8 Timestamp_SyncStatus\n"
"uint32 EventDataQualifier\n"
"uint8 ExtendedQualifier\n"
"uint16 Origin_InvalidFlags\n"
"float32 Origin_Xpos\n"
"float32 Origin_Xstd\n"
"float32 Origin_Ypos\n"
"float32 Origin_Ystd\n"
"float32 Origin_Zpos\n"
"float32 Origin_Zstd\n"
"float32 Origin_Roll\n"
"float32 Origin_Rollstd\n"
"float32 Origin_Pitch\n"
"float32 Origin_Pitchstd\n"
"float32 Origin_Yaw\n"
"float32 Origin_Yawstd\n"
"uint8 List_InvalidFlags\n"
"detections[] detection_array\n"
"float32 List_RadVelDomain_Min\n"
"float32 List_RadVelDomain_Max\n"
"uint32 List_NumOfDetections\n"
"float32 Aln_AzimuthCorrection\n"
"float32 Aln_ElevationCorrection\n"
"uint8 Aln_Status\n"
"================================================================================\n"
"MSG: ars548_msg/detections\n"
"std_msgs/Header header\n"
"  \n"
"float32 f_x\n"
"float32 f_y\n"
"float32 f_z\n"
"uint8 u_InvalidFlags\n"
"float32 f_RangeRate\n"
"float32 f_RangeRateSTD\n"
"int8 s_RCS\n"
"uint16 u_MeasurementID\n"
"uint8 u_PositivePredictiveValue\n"
"uint8 u_Classification\n"
"uint8 u_MultiTargetProbability\n"
"uint16 u_ObjectID\n"
"uint8 u_AmbiguityFlag\n"
"uint16 u_SortIndex\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ars548_msg::DetectionList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_msg::DetectionList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.serviceID);
      stream.next(m.MethodID);
      stream.next(m.data_length);
      stream.next(m.clientID);
      stream.next(m.sessionID);
      stream.next(m.protocol_version);
      stream.next(m.interface_version);
      stream.next(m.message_type);
      stream.next(m.return_code);
      stream.next(m.CRC);
      stream.next(m.Length);
      stream.next(m.SQC);
      stream.next(m.DataID);
      stream.next(m.Timestamp_Nanoseconds);
      stream.next(m.Timestamp_Seconds);
      stream.next(m.Timestamp_SyncStatus);
      stream.next(m.EventDataQualifier);
      stream.next(m.ExtendedQualifier);
      stream.next(m.Origin_InvalidFlags);
      stream.next(m.Origin_Xpos);
      stream.next(m.Origin_Xstd);
      stream.next(m.Origin_Ypos);
      stream.next(m.Origin_Ystd);
      stream.next(m.Origin_Zpos);
      stream.next(m.Origin_Zstd);
      stream.next(m.Origin_Roll);
      stream.next(m.Origin_Rollstd);
      stream.next(m.Origin_Pitch);
      stream.next(m.Origin_Pitchstd);
      stream.next(m.Origin_Yaw);
      stream.next(m.Origin_Yawstd);
      stream.next(m.List_InvalidFlags);
      stream.next(m.detection_array);
      stream.next(m.List_RadVelDomain_Min);
      stream.next(m.List_RadVelDomain_Max);
      stream.next(m.List_NumOfDetections);
      stream.next(m.Aln_AzimuthCorrection);
      stream.next(m.Aln_ElevationCorrection);
      stream.next(m.Aln_Status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectionList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_msg::DetectionList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_msg::DetectionList_<ContainerAllocator>& v)
  {
    s << indent << "serviceID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.serviceID);
    s << indent << "MethodID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.MethodID);
    s << indent << "data_length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data_length);
    s << indent << "clientID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.clientID);
    s << indent << "sessionID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sessionID);
    s << indent << "protocol_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.protocol_version);
    s << indent << "interface_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interface_version);
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "return_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_code);
    s << indent << "CRC: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.CRC);
    s << indent << "Length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Length);
    s << indent << "SQC: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.SQC);
    s << indent << "DataID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.DataID);
    s << indent << "Timestamp_Nanoseconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Timestamp_Nanoseconds);
    s << indent << "Timestamp_Seconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Timestamp_Seconds);
    s << indent << "Timestamp_SyncStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Timestamp_SyncStatus);
    s << indent << "EventDataQualifier: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.EventDataQualifier);
    s << indent << "ExtendedQualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ExtendedQualifier);
    s << indent << "Origin_InvalidFlags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Origin_InvalidFlags);
    s << indent << "Origin_Xpos: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Xpos);
    s << indent << "Origin_Xstd: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Xstd);
    s << indent << "Origin_Ypos: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Ypos);
    s << indent << "Origin_Ystd: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Ystd);
    s << indent << "Origin_Zpos: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Zpos);
    s << indent << "Origin_Zstd: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Zstd);
    s << indent << "Origin_Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Roll);
    s << indent << "Origin_Rollstd: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Rollstd);
    s << indent << "Origin_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Pitch);
    s << indent << "Origin_Pitchstd: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Pitchstd);
    s << indent << "Origin_Yaw: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Yaw);
    s << indent << "Origin_Yawstd: ";
    Printer<float>::stream(s, indent + "  ", v.Origin_Yawstd);
    s << indent << "List_InvalidFlags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.List_InvalidFlags);
    s << indent << "detection_array[]" << std::endl;
    for (size_t i = 0; i < v.detection_array.size(); ++i)
    {
      s << indent << "  detection_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ars548_msg::detections_<ContainerAllocator> >::stream(s, indent + "    ", v.detection_array[i]);
    }
    s << indent << "List_RadVelDomain_Min: ";
    Printer<float>::stream(s, indent + "  ", v.List_RadVelDomain_Min);
    s << indent << "List_RadVelDomain_Max: ";
    Printer<float>::stream(s, indent + "  ", v.List_RadVelDomain_Max);
    s << indent << "List_NumOfDetections: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.List_NumOfDetections);
    s << indent << "Aln_AzimuthCorrection: ";
    Printer<float>::stream(s, indent + "  ", v.Aln_AzimuthCorrection);
    s << indent << "Aln_ElevationCorrection: ";
    Printer<float>::stream(s, indent + "  ", v.Aln_ElevationCorrection);
    s << indent << "Aln_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Aln_Status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MSG_MESSAGE_DETECTIONLIST_H
