// Generated by gencpp from file ars548_msg/AccelerationLateralCog.msg
// DO NOT EDIT!


#ifndef ARS548_MSG_MESSAGE_ACCELERATIONLATERALCOG_H
#define ARS548_MSG_MESSAGE_ACCELERATIONLATERALCOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ars548_msg
{
template <class ContainerAllocator>
struct AccelerationLateralCog_
{
  typedef AccelerationLateralCog_<ContainerAllocator> Type;

  AccelerationLateralCog_()
    : header()
    , AccelerationLateralErrAmp(0.0)
    , AccelerationLateralErrAmp_InvalidFlag(0)
    , QualifierAccelerationLateral(0)
    , AccelerationLateral(0.0)
    , AccelerationLateral_InvalidFlag(0)
    , AccelerationLateralEventDataQualifier(0)  {
    }
  AccelerationLateralCog_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , AccelerationLateralErrAmp(0.0)
    , AccelerationLateralErrAmp_InvalidFlag(0)
    , QualifierAccelerationLateral(0)
    , AccelerationLateral(0.0)
    , AccelerationLateral_InvalidFlag(0)
    , AccelerationLateralEventDataQualifier(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _AccelerationLateralErrAmp_type;
  _AccelerationLateralErrAmp_type AccelerationLateralErrAmp;

   typedef uint8_t _AccelerationLateralErrAmp_InvalidFlag_type;
  _AccelerationLateralErrAmp_InvalidFlag_type AccelerationLateralErrAmp_InvalidFlag;

   typedef uint8_t _QualifierAccelerationLateral_type;
  _QualifierAccelerationLateral_type QualifierAccelerationLateral;

   typedef float _AccelerationLateral_type;
  _AccelerationLateral_type AccelerationLateral;

   typedef uint8_t _AccelerationLateral_InvalidFlag_type;
  _AccelerationLateral_InvalidFlag_type AccelerationLateral_InvalidFlag;

   typedef uint8_t _AccelerationLateralEventDataQualifier_type;
  _AccelerationLateralEventDataQualifier_type AccelerationLateralEventDataQualifier;





  typedef boost::shared_ptr< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> const> ConstPtr;

}; // struct AccelerationLateralCog_

typedef ::ars548_msg::AccelerationLateralCog_<std::allocator<void> > AccelerationLateralCog;

typedef boost::shared_ptr< ::ars548_msg::AccelerationLateralCog > AccelerationLateralCogPtr;
typedef boost::shared_ptr< ::ars548_msg::AccelerationLateralCog const> AccelerationLateralCogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator1> & lhs, const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.AccelerationLateralErrAmp == rhs.AccelerationLateralErrAmp &&
    lhs.AccelerationLateralErrAmp_InvalidFlag == rhs.AccelerationLateralErrAmp_InvalidFlag &&
    lhs.QualifierAccelerationLateral == rhs.QualifierAccelerationLateral &&
    lhs.AccelerationLateral == rhs.AccelerationLateral &&
    lhs.AccelerationLateral_InvalidFlag == rhs.AccelerationLateral_InvalidFlag &&
    lhs.AccelerationLateralEventDataQualifier == rhs.AccelerationLateralEventDataQualifier;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator1> & lhs, const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "309ffa6c4255f866c5f325a81d5d71f4";
  }

  static const char* value(const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x309ffa6c4255f866ULL;
  static const uint64_t static_value2 = 0xc5f325a81d5d71f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_msg/AccelerationLateralCog";
  }

  static const char* value(const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32 AccelerationLateralErrAmp\n"
"uint8 AccelerationLateralErrAmp_InvalidFlag\n"
"uint8 QualifierAccelerationLateral \n"
"float32 AccelerationLateral\n"
"uint8 AccelerationLateral_InvalidFlag\n"
"uint8 AccelerationLateralEventDataQualifier\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.AccelerationLateralErrAmp);
      stream.next(m.AccelerationLateralErrAmp_InvalidFlag);
      stream.next(m.QualifierAccelerationLateral);
      stream.next(m.AccelerationLateral);
      stream.next(m.AccelerationLateral_InvalidFlag);
      stream.next(m.AccelerationLateralEventDataQualifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelerationLateralCog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_msg::AccelerationLateralCog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_msg::AccelerationLateralCog_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "AccelerationLateralErrAmp: ";
    Printer<float>::stream(s, indent + "  ", v.AccelerationLateralErrAmp);
    s << indent << "AccelerationLateralErrAmp_InvalidFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccelerationLateralErrAmp_InvalidFlag);
    s << indent << "QualifierAccelerationLateral: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.QualifierAccelerationLateral);
    s << indent << "AccelerationLateral: ";
    Printer<float>::stream(s, indent + "  ", v.AccelerationLateral);
    s << indent << "AccelerationLateral_InvalidFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccelerationLateral_InvalidFlag);
    s << indent << "AccelerationLateralEventDataQualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccelerationLateralEventDataQualifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MSG_MESSAGE_ACCELERATIONLATERALCOG_H
