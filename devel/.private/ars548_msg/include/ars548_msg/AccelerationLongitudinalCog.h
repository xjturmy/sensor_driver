// Generated by gencpp from file ars548_msg/AccelerationLongitudinalCog.msg
// DO NOT EDIT!


#ifndef ARS548_MSG_MESSAGE_ACCELERATIONLONGITUDINALCOG_H
#define ARS548_MSG_MESSAGE_ACCELERATIONLONGITUDINALCOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ars548_msg
{
template <class ContainerAllocator>
struct AccelerationLongitudinalCog_
{
  typedef AccelerationLongitudinalCog_<ContainerAllocator> Type;

  AccelerationLongitudinalCog_()
    : header()
    , AccelerationLongitudinalErrAmp(0.0)
    , AccelerationLongitudinalErrAmp_InvalidFlag(0)
    , QualifierAccelerationLongitudinal(0)
    , AccelerationLongitudinal(0.0)
    , AccelerationLongitudinal_InvalidFlag(0)
    , AccelerationLongitudinalEventDataQualifier(0)  {
    }
  AccelerationLongitudinalCog_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , AccelerationLongitudinalErrAmp(0.0)
    , AccelerationLongitudinalErrAmp_InvalidFlag(0)
    , QualifierAccelerationLongitudinal(0)
    , AccelerationLongitudinal(0.0)
    , AccelerationLongitudinal_InvalidFlag(0)
    , AccelerationLongitudinalEventDataQualifier(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _AccelerationLongitudinalErrAmp_type;
  _AccelerationLongitudinalErrAmp_type AccelerationLongitudinalErrAmp;

   typedef uint8_t _AccelerationLongitudinalErrAmp_InvalidFlag_type;
  _AccelerationLongitudinalErrAmp_InvalidFlag_type AccelerationLongitudinalErrAmp_InvalidFlag;

   typedef uint8_t _QualifierAccelerationLongitudinal_type;
  _QualifierAccelerationLongitudinal_type QualifierAccelerationLongitudinal;

   typedef float _AccelerationLongitudinal_type;
  _AccelerationLongitudinal_type AccelerationLongitudinal;

   typedef uint8_t _AccelerationLongitudinal_InvalidFlag_type;
  _AccelerationLongitudinal_InvalidFlag_type AccelerationLongitudinal_InvalidFlag;

   typedef uint8_t _AccelerationLongitudinalEventDataQualifier_type;
  _AccelerationLongitudinalEventDataQualifier_type AccelerationLongitudinalEventDataQualifier;





  typedef boost::shared_ptr< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> const> ConstPtr;

}; // struct AccelerationLongitudinalCog_

typedef ::ars548_msg::AccelerationLongitudinalCog_<std::allocator<void> > AccelerationLongitudinalCog;

typedef boost::shared_ptr< ::ars548_msg::AccelerationLongitudinalCog > AccelerationLongitudinalCogPtr;
typedef boost::shared_ptr< ::ars548_msg::AccelerationLongitudinalCog const> AccelerationLongitudinalCogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator1> & lhs, const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.AccelerationLongitudinalErrAmp == rhs.AccelerationLongitudinalErrAmp &&
    lhs.AccelerationLongitudinalErrAmp_InvalidFlag == rhs.AccelerationLongitudinalErrAmp_InvalidFlag &&
    lhs.QualifierAccelerationLongitudinal == rhs.QualifierAccelerationLongitudinal &&
    lhs.AccelerationLongitudinal == rhs.AccelerationLongitudinal &&
    lhs.AccelerationLongitudinal_InvalidFlag == rhs.AccelerationLongitudinal_InvalidFlag &&
    lhs.AccelerationLongitudinalEventDataQualifier == rhs.AccelerationLongitudinalEventDataQualifier;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator1> & lhs, const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c979bc5f5e6d06b39337589aa41ab6a";
  }

  static const char* value(const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c979bc5f5e6d06bULL;
  static const uint64_t static_value2 = 0x39337589aa41ab6aULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_msg/AccelerationLongitudinalCog";
  }

  static const char* value(const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32 AccelerationLongitudinalErrAmp\n"
"uint8 AccelerationLongitudinalErrAmp_InvalidFlag\n"
"uint8 QualifierAccelerationLongitudinal \n"
"float32 AccelerationLongitudinal\n"
"uint8 AccelerationLongitudinal_InvalidFlag\n"
"uint8 AccelerationLongitudinalEventDataQualifier\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.AccelerationLongitudinalErrAmp);
      stream.next(m.AccelerationLongitudinalErrAmp_InvalidFlag);
      stream.next(m.QualifierAccelerationLongitudinal);
      stream.next(m.AccelerationLongitudinal);
      stream.next(m.AccelerationLongitudinal_InvalidFlag);
      stream.next(m.AccelerationLongitudinalEventDataQualifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelerationLongitudinalCog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_msg::AccelerationLongitudinalCog_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "AccelerationLongitudinalErrAmp: ";
    Printer<float>::stream(s, indent + "  ", v.AccelerationLongitudinalErrAmp);
    s << indent << "AccelerationLongitudinalErrAmp_InvalidFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccelerationLongitudinalErrAmp_InvalidFlag);
    s << indent << "QualifierAccelerationLongitudinal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.QualifierAccelerationLongitudinal);
    s << indent << "AccelerationLongitudinal: ";
    Printer<float>::stream(s, indent + "  ", v.AccelerationLongitudinal);
    s << indent << "AccelerationLongitudinal_InvalidFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccelerationLongitudinal_InvalidFlag);
    s << indent << "AccelerationLongitudinalEventDataQualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccelerationLongitudinalEventDataQualifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MSG_MESSAGE_ACCELERATIONLONGITUDINALCOG_H
